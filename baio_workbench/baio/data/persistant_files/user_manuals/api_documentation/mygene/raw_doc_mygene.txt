Gene annotation data
Data sources

We currently obtain the gene annotation data from several public data resources and keep them up-to-date, so that you don’t have to do it:
Source 	Update frequency 	Notes
NCBI Entrez 	weekly snapshot 	 
Ensembl 	whenever a new release is available 	
Ensembl Pre! and EnsemblGenomes
are not included at the moment
Uniprot 	whenever a new release is available 	 
NetAffx 	whenever a new release is available 	For “reporter” field
PharmGKB 	whenever a new release is available 	 
UCSC 	whenever a new release is available 	For “exons” field
CPDB 	whenever a new release is available 	For “pathway” field

The most updated data information can be accessed here.
Gene object

Gene annotation data are both stored and returned as a gene object, which is essentially a collection of fields (attributes) and their values:

{
    "_id": "1017",
    "_score": 20.4676,
    "taxid": 9606,
    "symbol": "CDK2",
    "entrezgene": 1017,
    "name": "cyclin-dependent kinase 2",
    "genomic_pos": {
        "start": 55966769,
        "chr": "12",
        "end": 55972784,
        "strand": 1
    }
}

The example above omits most of available fields. For a full example, you can just check out a few gene examples: CDK2, ADA. Or, did you try our interactive API page yet?
_id field

Each individual gene object contains an “_id” field as the primary key. The value of the “_id” field is the NCBI gene ID (the same as “entrezgene” field, but as a string) if available for a gene object, otherwise, Ensembl gene ID is used (e.g. those Ensembl-only genes). Here is an example. We recommend to use “entrezgene” field for the NCBI gene ID, and “ensembl.gene” field for Ensembl gene ID, instead of using “_id” field.

Note

Regardless how the value of the “_id” field looks like, either NCBI gene ID or Ensembl gene ID always works for our gene annotation service /v3/gene/<geneid>.
_score field

You will often see a “_score” field in the returned gene object, which is the internal score representing how well the query matches the returned gene object. It probably does not mean much in gene annotation service when only one gene object is returned. In gene query service, by default, the returned gene hits are sorted by the scores in descending order.
Species

We support ALL species annotated by NCBI and Ensembl. All of our services allow you to pass a “species” parameter to limit the query results. “species” parameter accepts taxonomy ids as the input. You can look for the taxomony ids for your favorite species from NCBI Taxonomy.

For convenience, we allow you to pass these common names for commonly used species (e.g. “species=human,mouse,rat”):
Common name 	Genus name 	Taxonomy id
human 	Homo sapiens 	9606
mouse 	Mus musculus 	10090
rat 	Rattus norvegicus 	10116
fruitfly 	Drosophila melanogaster 	7227
nematode 	Caenorhabditis elegans 	6239
zebrafish 	Danio rerio 	7955
thale-cress 	Arabidopsis thaliana 	3702
frog 	Xenopus tropicalis 	8364
pig 	Sus scrofa 	9823

If needed, you can pass “species=all” to query against all available species, although, we recommend you to pass specific species you need for faster response.
Genome assemblies

Our gene query service supports genome interval queries. We import genomic location data from Ensembl, so all species available there are supported. You can find the their reference genome assemblies information here.

This table lists the genome assembies for commonly-used species:
Common name 	Genus name 	Genome assembly
human 	Homo sapiens 	GRCh38 (hg38), also support hg19
mouse 	Mus musculus 	GRCm38 (mm10), also support mm9
rat 	Rattus norvegicus 	Rnor_6.0 (rn6)
fruitfly 	Drosophila melanogaster 	BDGP6 (dm6)
nematode 	Caenorhabditis elegans 	WBcel235 (ce11)
zebrafish 	Danio rerio 	GRCz10 (danRer10)
frog 	Xenopus tropicalis 	JGI_7.0 (xenTro7)
pig 	Sus scrofa 	Sscrofa10.2 (susScr3)
Available fields

The table below lists of all of the possible fields that could be in a gene object.
Search:
Show
entries
Field	Indexed	Type	Notes
accession	 	object	 
accession.genomic	 	text	 
accession.protein	 	text	 
accession.rna	 	text	 
accession.translation	 	object	 
alias	 	keyword	 
AnimalQTLdb	 	text	 
biocarta	 	text	 
clingen	 	object	 
clingen.clinical_validity	 	object	 
clingen.clinical_validity.classification	 	keyword	 
clingen.clinical_validity.classification_date	 	date	 
clingen.clinical_validity.disease_label	 	text	 
clingen.clinical_validity.gcep	 	text	 
clingen.clinical_validity.moi	 	keyword	 
clingen.clinical_validity.mondo	 	keyword	 
clingen.clinical_validity.online_report	 	text	 
clingen.clinical_validity.sop	 	keyword	 
ec	 	keyword	 
ensembl	 	object	 
ensembl.gene	 	keyword	 
ensembl.protein	 	keyword	 
ensembl.transcript	 	keyword	 
ensembl.translation	 	object	 
ensembl.type_of_gene	 	keyword	 
entrezgene	 	keyword	 
exac	 	object	 
exac.all	 	object	 
exac.bp	 	integer	 
exac.cds_end	 	integer	 
exac.cds_start	 	integer	 
exac.n_exons	 	integer	 
exac.nonpsych	 	object	 
exac.nontcga	 	object	 
exac.transcript	 	text	 
exons	 	object	 
exons_hg19	 	object	 
exons_mm10	 	object	 
exons_mm9	 	object	 
FLYBASE	 	keyword	 
generif	 	object	 
generif.pubmed	 	long	 
generif.text	 	text	 
genomic_pos	 	object	 
genomic_pos.chr	 	keyword	 
genomic_pos.end	 	long	 
genomic_pos.start	 	long	 
genomic_pos.strand	 	byte	 
genomic_pos_hg19	 	object	 
genomic_pos_hg19.chr	 	keyword	 
genomic_pos_hg19.end	 	long	 
genomic_pos_hg19.start	 	long	 
genomic_pos_hg19.strand	 	byte	 
genomic_pos_mm9	 	object	 
genomic_pos_mm9.chr	 	keyword	 
genomic_pos_mm9.end	 	long	 
genomic_pos_mm9.start	 	long	 
genomic_pos_mm9.strand	 	byte	 
go	 	object	 
go.BP	 	object	 
go.BP.category	 	text	 
go.BP.evidence	 	text	 
go.BP.id	 	keyword	 
go.BP.pubmed	 	long	 
go.BP.term	 	text	 
go.CC	 	object	 
go.CC.category	 	text	 
go.CC.evidence	 	text	 
go.CC.id	 	keyword	 
go.CC.pubmed	 	long	 
go.CC.term	 	text	 
go.MF	 	object	 
go.MF.category	 	text	 
go.MF.evidence	 	text	 
go.MF.id	 	keyword	 
go.MF.pubmed	 	long	 
go.MF.term	 	text	 
HGNC	 	keyword	 
homologene	 	object	 
homologene.genes	 	long	 
homologene.id	 	long	 
HPRD	 	keyword	 
humancyc	 	text	 
interpro	 	object	 
interpro.desc	 	text	 
interpro.id	 	keyword	 
interpro.short_desc	 	text	 
ipi	 	keyword	 
kegg	 	text	 
locus_tag	 	keyword	 
map_location	 	text	 
MGI	 	keyword	 
MIM	 	keyword	 
miRBase	 	keyword	 
mousecyc	 	text	 
name	 	text	 
netpath	 	text	 
other_names	 	text	 
pantherdb	 	object	 
pantherdb.Araport	 	keyword	 
pantherdb.dictyBase	 	keyword	 
pantherdb.EcoGene	 	keyword	 
pantherdb.Ensembl	 	keyword	 
pantherdb.EnsemblGenome	 	keyword	 
pantherdb.FlyBase	 	keyword	 
pantherdb.Gene	 	keyword	 
pantherdb.Gene_Name	 	keyword	 
pantherdb.Gene_OrderedLocusName	 	keyword	 
pantherdb.Gene_ORFName	 	keyword	 
pantherdb.GeneID	 	keyword	 
pantherdb.HGNC	 	keyword	 
pantherdb.MGI	 	keyword	 
pantherdb.ortholog	 	object	 
pantherdb.ortholog.Araport	 	keyword	 
pantherdb.ortholog.dictyBase	 	keyword	 
pantherdb.ortholog.EcoGene	 	keyword	 
pantherdb.ortholog.Ensembl	 	keyword	 
pantherdb.ortholog.EnsemblGenome	 	keyword	 
pantherdb.ortholog.FlyBase	 	keyword	 
pantherdb.ortholog.Gene	 	keyword	 
pantherdb.ortholog.Gene_Name	 	keyword	 
pantherdb.ortholog.Gene_OrderedLocusName	 	keyword	 
pantherdb.ortholog.Gene_ORFName	 	keyword	 
pantherdb.ortholog.GeneCards	 	keyword	 
pantherdb.ortholog.GeneID	 	keyword	 
pantherdb.ortholog.HGNC	 	keyword	 
pantherdb.ortholog.MGI	 	keyword	 
pantherdb.ortholog.ortholog_type	 	keyword	 
pantherdb.ortholog.panther_family	 	keyword	 
pantherdb.ortholog.PomBase	 	keyword	 
pantherdb.ortholog.RGD	 	keyword	 
pantherdb.ortholog.SGD	 	keyword	 
pantherdb.ortholog.TAIR	 	keyword	 
pantherdb.ortholog.taxid	 	integer	 
pantherdb.ortholog.uniprot_kb	 	keyword	 
pantherdb.ortholog.WormBase	 	keyword	 
pantherdb.ortholog.ZFIN	 	keyword	 
pantherdb.PomBase	 	keyword	 
pantherdb.RGD	 	keyword	 
pantherdb.SGD	 	keyword	 
pantherdb.TAIR	 	keyword	 
pantherdb.uniprot_kb	 	keyword	 
pantherdb.WormBase	 	keyword	 
pantherdb.ZFIN	 	keyword	 
pathway	 	object	 
pathway.biocarta	 	object	 
pathway.biocarta.id	 	text	 
pathway.biocarta.name	 	text	 
pathway.humancyc	 	object	 
pathway.humancyc.id	 	text	 
pathway.humancyc.name	 	text	 
pathway.kegg	 	object	 
pathway.kegg.id	 	text	 
pathway.kegg.name	 	text	 
pathway.mousecyc	 	object	 
pathway.mousecyc.id	 	text	 
pathway.mousecyc.name	 	text	 
pathway.netpath	 	object	 
pathway.netpath.id	 	text	 
pathway.netpath.name	 	text	 
pathway.pharmgkb	 	object	 
pathway.pharmgkb.id	 	text	 
pathway.pharmgkb.name	 	text	 
pathway.pid	 	object	 
pathway.pid.id	 	text	 
pathway.pid.name	 	text	 
pathway.reactome	 	object	 
pathway.reactome.id	 	text	 
pathway.reactome.name	 	text	 
pathway.smpdb	 	object	 
pathway.smpdb.id	 	text	 
pathway.smpdb.name	 	text	 
pathway.wikipathways	 	object	 
pathway.wikipathways.id	 	text	 
pathway.wikipathways.name	 	text	 
pathway.yeastcyc	 	object	 
pathway.yeastcyc.id	 	text	 
pathway.yeastcyc.name	 	text	 
pdb	 	keyword	 
pfam	 	keyword	 
pharmgkb	 	keyword	 
pharos	 	object	 
pharos.target_id	 	integer	 
pid	 	text	 
pir	 	keyword	 
prosite	 	keyword	 
RATMAP	 	keyword	 
reactome	 	text	 
reagent	 	object	 
reagent.CM-LibrX-no-seq	 	object	 
reagent.CM-LibrX-no-seq.id	 	keyword	 
reagent.CM-LibrX-no-seq.relationship	 	text	 
reagent.CondMedia_CM_LibrAB	 	object	 
reagent.CondMedia_CM_LibrAB.id	 	keyword	 
reagent.CondMedia_CM_LibrAB.relationship	 	text	 
reagent.GNF_hs-druggable_lenti-shRNA	 	object	 
reagent.GNF_hs-druggable_lenti-shRNA.id	 	keyword	 
reagent.GNF_hs-druggable_lenti-shRNA.relationship	 	text	 
reagent.GNF_hs-druggable_plasmid-shRNA	 	object	 
reagent.GNF_hs-druggable_plasmid-shRNA.id	 	keyword	 
reagent.GNF_hs-druggable_plasmid-shRNA.relationship	 	text	 
reagent.GNF_hs-druggable_siRNA	 	object	 
reagent.GNF_hs-druggable_siRNA.id	 	keyword	 
reagent.GNF_hs-druggable_siRNA.relationship	 	text	 
reagent.GNF_hs-GPCR_IDT-siRNA	 	object	 
reagent.GNF_hs-GPCR_IDT-siRNA.id	 	keyword	 
reagent.GNF_hs-GPCR_IDT-siRNA.relationship	 	text	 
reagent.GNF_hs-oncomine_IDT-siRNA	 	object	 
reagent.GNF_hs-oncomine_IDT-siRNA.id	 	keyword	 
reagent.GNF_hs-oncomine_IDT-siRNA.relationship	 	text	 
reagent.GNF_hs-ORFeome1_1_reads	 	object	 
reagent.GNF_hs-ORFeome1_1_reads.id	 	keyword	 
reagent.GNF_hs-ORFeome1_1_reads.relationship	 	text	 
reagent.GNF_hs-Origene	 	object	 
reagent.GNF_hs-Origene.id	 	keyword	 
reagent.GNF_hs-Origene.relationship	 	text	 
reagent.GNF_hs-pkinase_IDT-siRNA	 	object	 
reagent.GNF_hs-pkinase_IDT-siRNA.id	 	keyword	 
reagent.GNF_hs-pkinase_IDT-siRNA.relationship	 	text	 
reagent.GNF_hs_LentiORF-HA-MYC	 	object	 
reagent.GNF_hs_LentiORF-HA-MYC.id	 	keyword	 
reagent.GNF_hs_LentiORF-HA-MYC.relationship	 	text	 
reagent.GNF_hs_LentiORF-Jred	 	object	 
reagent.GNF_hs_LentiORF-Jred.id	 	keyword	 
reagent.GNF_hs_LentiORF-Jred.relationship	 	text	 
reagent.GNF_mm+hs-MGC	 	object	 
reagent.GNF_mm+hs-MGC.id	 	keyword	 
reagent.GNF_mm+hs-MGC.relationship	 	text	 
reagent.GNF_mm+hs_RetroCDNA	 	object	 
reagent.GNF_mm+hs_RetroCDNA.id	 	keyword	 
reagent.GNF_mm+hs_RetroCDNA.relationship	 	text	 
reagent.GNF_mm-GIPZ_shRNA	 	object	 
reagent.GNF_mm-GIPZ_shRNA.id	 	keyword	 
reagent.GNF_mm-GIPZ_shRNA.relationship	 	text	 
reagent.GNF_mm-kinase_lenti-shRNA	 	object	 
reagent.GNF_mm-kinase_lenti-shRNA.id	 	keyword	 
reagent.GNF_mm-kinase_lenti-shRNA.relationship	 	text	 
reagent.GNF_mm-kinase_plasmid-shRNA	 	object	 
reagent.GNF_mm-kinase_plasmid-shRNA.id	 	keyword	 
reagent.GNF_mm-kinase_plasmid-shRNA.relationship	 	text	 
reagent.GNF_mm-TLR_lenti_shRNA	 	object	 
reagent.GNF_mm-TLR_lenti_shRNA.id	 	keyword	 
reagent.GNF_mm-TLR_lenti_shRNA.relationship	 	text	 
reagent.GNF_Qia_hs-genome_v1_siRNA	 	object	 
reagent.GNF_Qia_hs-genome_v1_siRNA.id	 	keyword	 
reagent.GNF_Qia_hs-genome_v1_siRNA.relationship	 	text	 
reagent.IDT_27mer_hs_ATPase_siRNAs	 	object	 
reagent.IDT_27mer_hs_ATPase_siRNAs.id	 	keyword	 
reagent.IDT_27mer_hs_ATPase_siRNAs.relationship	 	text	 
reagent.Invitrogen_IVTHSSIPKv2	 	object	 
reagent.Invitrogen_IVTHSSIPKv2.id	 	keyword	 
reagent.Invitrogen_IVTHSSIPKv2.relationship	 	text	 
reagent.MasterSecretomicsList	 	object	 
reagent.MasterSecretomicsList.id	 	keyword	 
reagent.MasterSecretomicsList.relationship	 	text	 
reagent.NIBRI_hs-Secretome_pDEST	 	object	 
reagent.NIBRI_hs-Secretome_pDEST.id	 	keyword	 
reagent.NIBRI_hs-Secretome_pDEST.relationship	 	text	 
reagent.NOVART_hs-genome_siRNA	 	object	 
reagent.NOVART_hs-genome_siRNA.id	 	keyword	 
reagent.NOVART_hs-genome_siRNA.relationship	 	text	 
reagent.Qiagen_mouse_QMIHSINHIBv1	 	object	 
reagent.Qiagen_mouse_QMIHSINHIBv1.id	 	keyword	 
reagent.Qiagen_mouse_QMIHSINHIBv1.relationship	 	text	 
reagent.Qiagen_mouse_QMIHSMIMv1	 	object	 
reagent.Qiagen_mouse_QMIHSMIMv1.id	 	keyword	 
reagent.Qiagen_mouse_QMIHSMIMv1.relationship	 	text	 
refseq	 	object	 
refseq.genomic	 	text	 
refseq.protein	 	text	 
refseq.rna	 	text	 
refseq.translation	 	object	 
reporter	 	object	 
reporter.AraGene-1_0	 	keyword	 
reporter.BovGene-1_0	 	keyword	 
reporter.CanGene-1_0	 	keyword	 
reporter.ChiGene-1_0	 	keyword	 
reporter.CynGene-1_0	 	keyword	 
reporter.CyRGene-1_0	 	keyword	 
reporter.DroGene-1_0	 	keyword	 
reporter.EleGene-1_0	 	keyword	 
reporter.EquGene-1_0	 	keyword	 
reporter.FelGene-1_0	 	keyword	 
reporter.GNF1H	 	keyword	 
reporter.GNF1M	 	keyword	 
reporter.GuiGene-1_0	 	keyword	 
reporter.HG-U133_Plus_2	 	keyword	 
reporter.HG-U95Av2	 	keyword	 
reporter.HG-U95B	 	keyword	 
reporter.HTA-2_0	 	keyword	 
reporter.HuEx-1_0	 	keyword	 
reporter.HuGene-1_1	 	keyword	 
reporter.HuGene-2_1	 	keyword	 
reporter.MarGene-1_0	 	keyword	 
reporter.MG-U74Av2	 	keyword	 
reporter.MG-U74Bv2	 	keyword	 
reporter.MoEx-1_0	 	keyword	 
reporter.MoGene-1_1	 	keyword	 
reporter.MoGene-2_1	 	keyword	 
reporter.Mouse430_2	 	keyword	 
reporter.MTA-1_0	 	keyword	 
reporter.PorGene-1_0	 	keyword	 
reporter.RabGene-1_0	 	keyword	 
reporter.RaEx-1_0	 	keyword	 
reporter.RaGene-1_1	 	keyword	 
reporter.RaGene-2_1	 	keyword	 
reporter.Rat230_2	 	keyword	 
reporter.RCnGene-1_0	 	keyword	 
reporter.RG-U34A	 	keyword	 
reporter.RG-U34B	 	keyword	 
reporter.RheGene-1_0	 	keyword	 
reporter.RJpGene-1_0	 	keyword	 
reporter.RUSGene-1_0	 	keyword	 
reporter.snowball	 	keyword	 
reporter.SoyGene-1_0	 	keyword	 
reporter.ZebGene-1_0	 	keyword	 
retired	 	long	 
RGD	 	keyword	 
SGD	 	keyword	 
smpdb	 	text	 
summary	 	text	 
symbol	 	keyword	 
TAIR	 	keyword	 
taxid	 	integer	 
type_of_gene	 	keyword	 
umls	 	object	 
umls.cui	 	keyword	 
umls.protein_cui	 	keyword	 
unigene	 	keyword	 
uniprot	 	object	 
uniprot.Swiss-Prot	 	keyword	 
uniprot.TrEMBL	 	keyword	 
Vega	 	text	 
wikipathways	 	text	 
wikipedia	 	object	 
wikipedia.url_stub	 	text	 
WormBase	 	keyword	 
Xenbase	 	keyword	 
yeastcyc	 	text	 
ZFIN	 	keyword


Gene query service

This page describes the reference for MyGene.info gene query web service. It’s also recommended to try it live on our interactive API page.
Service endpoint

http://mygene.info/v3/query

GET request
Query parameters
q

    Required, passing user query. The detailed query syntax for parameter “q” we explained below.

fields

    Optional, can be a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. gene 1017). Note that it supports dot notation as well, e.g., you can pass “refseq.rna”. If “fields=all”, all available fields will be returned. Default: “symbol,name,taxid,entrezgene”.

species

    Optional, can be used to limit the gene hits from given species. You can use “common names” for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. See more details here. Multiple species can be passed using comma as a separator. Passing “all” will query against all available species. Default: all.

size

    Optional, the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.

from

    Optional, the number of matching gene hits to skip, starting from 0. Default: 0

Hint

The combination of “size” and “from” parameters can be used to get paging for large query:

q=cdk*&size=50                     first 50 hits
q=cdk*&size=50&from=50             the next 50 hits

fetch_all

    Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. The return object contains a _scroll_id field, which when passed as a parameter to the query endpoint, returns the next 1000 query results. Setting fetch_all = TRUE causes the results to be inherently unsorted, therefore the sort parameter is ignored. For more information see examples using fetch_all here. Default: FALSE.

scroll_id

    Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. Supplying a valid scroll_id will return the next 1000 unordered results. If the next results are not obtained within 1 minute of the previous set of results, the scroll_id becomes stale, and a new one must be obtained with another query request with fetch_all = TRUE. All other parameters are ignored when the scroll_id parameter is supplied. For more information see examples using scroll_id here.

sort

    Optional, the comma-separated fields to sort on. Prefix with “-” for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.

facets

    Optional, a single field or comma-separated fields to return facets, for example, “facets=taxid”, “facets=taxid,type_of_gene”. See examples of faceted queries here.

facet_size

    Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to ret

urn in a faceted query.
species_facet_filter

    Optional, relevant when faceting on species (i.e., “facets=taxid” are passed). It’s used to pass species filter without changing the scope of faceting, so that the returned facet counts won’t change. Either species name or taxonomy id can be used, just like “species” parameter above. See examples of faceted queries here.

entrezonly

    Optional, when passed as “true” or “1”, the query returns only the hits with valid Entrez gene ids. Default: false.

ensemblonly

    Optional, when passed as “true” or “1”, the query returns only the hits with valid Ensembl gene ids. Default: false.

callback

    Optional, you can pass a “callback” parameter to make a JSONP call.

dotfield

    Optional, can be used to control the format of the returned gene object. If “dotfield” is true, the returned data object is returned flattened (no nested objects) using dotfield notation for key names. Default: false.

filter

    Alias for “fields” parameter.

limit

    Alias for “size” parameter.

skip

    Alias for “from” parameter.

email

    Optional, if you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.

Query syntax

Examples of query parameter “q”:
Simple queries

search for everything:

q=cdk2                              search for any fields
q=tumor suppressor                  default as "AND" for all query terms
q="cyclin-dependent kinase"         search for the phrase

Fielded queries

q=entrezgene:1017
q=symbol:cdk2
q=refseq:NM_001798

Available fields

This table lists some commonly used fields can be used for “fielded queries”. Check here for the complete list of available fields.
Field 	Description 	Examples
entrezgene 	Entrez gene id 	q=entrezgene:1017
ensembl.gene 	Ensembl gene id 	q=ensembl.gene:ENSG00000123374
symbol 	official gene symbol 	q=symbol:cdk2
name 	gene name 	q=name:cyclin-dependent
alias 	gene alias 	q=alias:p33
summary 	gene summary text 	q=summary:insulin
refseq 	NCBI RefSeq id (both rna and proteins) 	q=refseq:NM_001798
q=refseq:NP_439892
unigene 	NCBI UniGene id 	q=unigene:Hs.19192
homologene 	NCBI HomoloGene id 	q=homologene:74409
accession 	NCBI GeneBank Accession number 	q=accession:AA810989
ensembl.transcript 	Ensembl transcript id 	q=ensembl.transcript:ENST00000266970
ensembl.protein 	Ensembl protein id 	q=ensembl.protein:ENSP00000243067
uniprot 	UniProt id 	q=uniprot:P24941
ipi (deprecated!) 	IPI id 	q=ipi:IPI00031681
pdb 	PDB id 	q=pdb:1AQ1
prosite 	Prosite id 	q=prosite:PS50011
pfam 	PFam id 	q=pfam:PF00069
interpro 	InterPro id 	q=interpro:IPR008351
mim 	OMIM id 	q=mim:116953
pharmgkb 	PharmGKB id 	q=pharmgkb:PA101
reporter 	Affymetrix probeset id 	q=reporter:204252_at
reagent 	GNF reagent id 	q=reagent:GNF282834
go 	Gene Ontology id 	q=go:0000307
hgnc 	HUGO Gene Nomenclature Committee 	q=hgnc:1771
hprd 	Human Protein Reference Database 	q=hprd:00310
mgi 	Mouse Genome Informatics 	q=mgi:MGI\:88339
rgd 	Rat Genome Database 	q=rgd:620620
flybase 	A Database of Drosophila Genes & Genomes 	q=flybase:FBgn0004107&species=fruitfly
wormbase 	C elegans and related nematodes database 	q=wormbase:WBGene00057218&species=31234
zfin 	Zebrafish Information Network 	q=zfin:ZDB-GENE-980526-104&species=zebrafish
tair 	Arabidopsis Information Resource 	q=tair:AT3G48750&species=thale-cress
xenbase 	
Xenopus laevis and Xenopus tropicalis
biology and genomics resource
	q=xenbase:XB-GENE-1001990&species=frog
mirbase 	
database of published miRNA
sequences and annotation
	q=mirbase:MI0017267
retired 	
Retired Entrez gene id, including
those with replaced gene ids.
	q=retired:84999
Genome interval query

When we detect your query (”q” parameter) contains a genome interval pattern like this one:

chrX:151,073,054-151,383,976

we will do the genome interval query for you. Besides above interval string, you also need to specify “species” parameter (with the default as human). These are all acceptted queries:

q=chrX:151073054-151383976&species:9606
q=chrX:151,073,054-151,383,976&species:human

Hint

As you can see above, the genomic locations can include commas in it.

See also

Genome assembly information
Wildcard queries

Wildcard character “*” or “?” is supported in either simple queries or fielded queries:

q=CDK?                              single character wildcard
q=symbol:CDK?                       single character wildcard within "symbol" field
q=IL*R                              multiple character wildcard

Note

Wildcard character can not be the first character. It will be ignored.
Boolean operators and grouping

You can use AND/OR/NOT boolean operators and grouping to form complicated queries:

q=tumor AND suppressor                        AND operator
q=CDK2 OR BTK                                 OR operator
q="tumor suppressor" NOT receptor             NOT operator
q=(interleukin OR insulin) AND receptor       the use of parentheses

Returned object

A GET request like this:

http://mygene.info/v3/query?q=symbol:cdk2

should return hits as:

{
  "hits": [
    {
      "name": "cyclin-dependent kinase 2",
      "_score": 87.76775,
      "symbol": "CDK2",
      "taxid": 9606,
      "entrezgene": 1017,
      "_id": "1017"
    },
    {
      "name": "cyclin-dependent kinase 2",
      "_score": 79.480484,
      "symbol": "Cdk2",
      "taxid": 10090,
      "entrezgene": 12566,
      "_id": "12566"
    },
    {
      "name": "cyclin dependent kinase 2",
      "_score": 62.286797,
      "symbol": "Cdk2",
      "taxid": 10116,
      "entrezgene": 362817,
      "_id": "362817"
    }
  ],
  "total": 3,
  "max_score": 87.76775,
  "took": 4
}

Faceted queries

If you need to perform a faceted query, you can pass an optional “facets” parameter. For example, if you want to get the facets on species, you can pass “facets=taxid”:

A GET request like this:

http://mygene.info/v3/query?q=cdk2&size=1&facets=taxid

should return hits as:

{
  "hits":[
    {
      "entrezgene":1017,
      "name":"cyclin-dependent kinase 2",
      "_score":400.43347,
      "symbol":"CDK2",
      "_id":"1017",
      "taxid":9606
    }
  ],
  "total":26,
  "max_score":400.43347,
  "took":7,
  "facets":{
    "taxid":{
      "_type":"terms",
      "total":26,
      "terms":[
        {
          "count":14,
          "term":9606
        },
        {
          "count":7,
          "term":10116
        },
        {
          "count":5,
          "term":10090
        }
      ],
      "other":0,
      "missing":0
    }
  }
}

Another useful field to get facets on is “type_of_gene”:

http://mygene.info/v3/query?q=cdk2&size=1&facets=type_of_gene

It should return hits as:

{
  "hits":[
    {
      "entrezgene":1017,
      "name":"cyclin-dependent kinase 2",
      "_score":400.43347,
      "symbol":"CDK2",
      "_id":"1017",
      "taxid":9606
    }
  ],
  "total":26,
  "max_score":400.43347,
  "took":97,
  "facets":{
    "type_of_gene":{
      "_type":"terms",
      "total":26,
      "terms":[
        {
          "count":20,
          "term":"protein-coding"
        },
        {
          "count":6,
          "term":"pseudo"
        }
      ],
      "other":0,
      "missing":0
    }
  }
}

If you need to, you can also pass multiple fields as comma-separated list:

http://mygene.info/v3/query?q=cdk2&size=1&facets=taxid,type_of_gene

Particularly relevant to species facets (i.e., “facets=taxid”), you can pass a “species_facet_filter” parameter to filter the returned hits on a given species, without changing the scope of the facets (i.e. facet counts will not change). This is useful when you need to get the subset of the hits for a given species after the initial faceted query on species.

You can see the different “hits” are returned in the following queries, while “facets” keeps the same:

http://mygene.info/v3/query?q=cdk?&size=1&facets=taxid&species_facet_filter=human

v.s.

http://mygene.info/v3/query?q=cdk?&size=1&facets=taxid&species_facet_filter=mouse

Scrolling queries

If you want to return ALL results of a very large query (>10,000 results), sometimes the paging method described above can take too long. In these cases, you can use a scrolling query. This is a two-step process that turns off database sorting to allow very fast retrieval of all query results. To begin a scrolling query, you first call the query endpoint as you normally would, but with an extra parameter fetch_all = TRUE. For example, a GET request to:

http://mygene.info/v3/query?q=brain&fetch_all=TRUE

Returns the following object:

{
  "_scroll_id": "cXVlcnlUaGVuRmV0Y2g7MTA7MjA1NjY1MzMwOl9HM29rRkg2VFZ5S1c3cTJtYkI4RHc7MjA1NjY1MjY3OlM0V1VCa194UWdLYjlQWTR5NGZCeFE7MjA1NjY1MTM0OlRGWVpXLVZrU2NTWmZLQUlEVnlRRkE7MjA1NjY1MzMxOl9HM29rRkg2VFZ5S1c3cTJtYkI4RHc7MzEyMDY0NzU6TVBZd0FEVF9UcVdSQWhWajlfN2U4ZzsyMDU2NjUxMzM6VEZZWlctVmtTY1NaZktBSURWeVFGQTsyMDU2NjUxMzU6VEZZWlctVmtTY1NaZktBSURWeVFGQTsyMDU2NjUzMzI6X0czb2tGSDZUVnlLVzdxMm1iQjhEdzsyMDU2NjUyNjg6UzRXVUJrX3hRZ0tiOVBZNHk0ZkJ4UTszMTIwNjQ3NDpNUFl3QURUX1RxV1JBaFZqOV83ZThnOzA7",
  "max_score": 13.958638,
  "took": 270,
  "total": 14571,
  "hits": [
    {
      "_id": "390259",
      "_score": 13.958638,
      "entrezgene": 390259,
      "name": "brain specific homeobox",
      "symbol": "BSX",
      "taxid": 9606
    },
    .
    .
    .
  ]
}

At this point, the first 1000 hits have been returned (of ~14,000 total), and a scroll has been set up for your query. To get the next batch of 1000 unordered results, simply execute a GET request to the following address, supplying the _scroll_id from the first step into the scroll_id parameter in the second step:

http://mygene.info/v3/query?scroll_id=cXVlcnlUaGVuRmV0Y2g7MTA7MjA1NjY1MzMwOl9HM29rRkg2VFZ5S1c3cTJtYkI4RHc7MjA1NjY1MjY3OlM0V1VCa194UWdLYjlQWTR5NGZCeFE7MjA1NjY1MTM0OlRGWVpXLVZrU2NTWmZLQUlEVnlRRkE7MjA1NjY1MzMxOl9HM29rRkg2VFZ5S1c3cTJtYkI4RHc7MzEyMDY0NzU6TVBZd0FEVF9UcVdSQWhWajlfN2U4ZzsyMDU2NjUxMzM6VEZZWlctVmtTY1NaZktBSURWeVFGQTsyMDU2NjUxMzU6VEZZWlctVmtTY1NaZktBSURWeVFGQTsyMDU2NjUzMzI6X0czb2tGSDZUVnlLVzdxMm1iQjhEdzsyMDU2NjUyNjg6UzRXVUJrX3hRZ0tiOVBZNHk0ZkJ4UTszMTIwNjQ3NDpNUFl3QURUX1RxV1JBaFZqOV83ZThnOzA7

Hint

Your scroll will remain active for 1 minute from the last time you requested results from it. If your scroll expires before you get the last batch of results, you must re-request the scroll_id by setting fetch_all = TRUE as in step 1.
Batch queries via POST

Although making simple GET requests above to our gene query service is sufficient in most of use cases, there are some cases you might find it’s more efficient to make queries in a batch (e.g., retrieving gene annotation for multiple genes). Fortunately, you can also make batch queries via POST requests when you need:

URL: http://mygene.info/v3/query
HTTP method:  POST

Query parameters
q

    Required, multiple query terms seperated by comma (also support “+” or white space), but no wildcard, e.g., ‘q=1017,1018’ or ‘q=CDK2+BTK’

scopes

    Optional, specify one or more fields (separated by comma) as the search “scopes”, e.g., “scopes=entrezgene”, “scopes=entrezgene,ensemblgene”. The available “fields” can be passed to “scopes” parameter are listed above. Default: “scopes=entrezgene,ensemblgene,retired” (either Entrez or Ensembl gene ids).

species

    Optional, can be used to limit the gene hits from given species. You can use “common names” for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. See more details here. Multiple species can be passed using comma as a separator. Default: all.

fields

    Optional, can be a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. gene 1017). Note that it supports dot notation as well, e.g., you can pass “refseq.rna”. If “fields=all”, all available fields will be returned. Default: “symbol,name,taxid,entrezgene”.

dotfield

    Optional, can be used to control the format of the returned fields when passed “fields” parameter contains dot notation, e.g. “fields=refseq.rna”. If “dofield” is true, the returned data object contains a single “refseq.rna” field, otherwise, a single “refseq” field with a sub-field of “rna”. Default: false.

email

    Optional, if you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.

Example code

Unlike GET requests, you can easily test them from browser, make a POST request is often done via a piece of code. Here is a sample python snippet:

import requests
headers = {'content-type': 'application/x-www-form-urlencoded'}
params = 'q=1017,1018&scopes=entrezgene&fields=name,symbol,taxid,entrezgene'
res = requests.post('http://mygene.info/v3/query', data=params, headers=headers)

Returned object

Returned result (the value of “res.text” variable above) from above example code should look like this:

[
  {
    '_id': '1017',
    '_score': 22.757837,
    'entrezgene': 1017,
    'name': 'cyclin dependent kinase 2',
    'query': '1017',
    'symbol': 'CDK2',
    'taxid': 9606
  },
  {
    '_id': '1018',
    '_score': 22.757782,
    'entrezgene': 1018,
    'name': 'cyclin dependent kinase 3',
    'query': '1018',
    'symbol': 'CDK3',
    'taxid': 9606
  }
]

Tip

“query” field in returned object indicates the matching query term.

Note

if no “fields” parameter is specified, all available fields will be returned

If a query term has no match, it will return with “notfound” field as “true”:

params = 'q=1017,dummy&scopes=entrezgene&fields=name,symbol,taxid,entrezgene'
res = requests.post('http://mygene.info/v3/query', data=params, headers=headers)

[
  {
    "name": "cyclin-dependent kinase 2",
    "symbol": "CDK2",
    "taxid": 9606,
    "entrezgene": 1017,
    "query": "1017",
    "_id": "1017"
  },
  {
    "query": "dummy",
    "notfound": true
  }
]

If a query term has multiple matches, they will be included with the same “query” field:

params = 'q=tp53,1017&scopes=symbol,entrezgene&fields=name,symbol,taxid,entrezgene'
res = requests.post('http://mygene.info/v3/query', data=params, headers=headers)

[
  {
    "name": "tumor protein p53",
    "symbol": "TP53",
    "taxid": 9606,
    "entrezgene": 7157,
    "query": "tp53",
    "_id": "7157"
  },
  {
    "name": "tumor protein p53",
    "symbol": "Tp53",
    "taxid": 10116,
    "entrezgene": 24842,
    "query": "tp53",
    "_id": "24842"
  },
  {
    "name": "cyclin-dependent kinase 2",
    "symbol": "CDK2",
    "taxid": 9606,
    "entrezgene": 1017,
    "query": "1017",
    "_id": "1017"
  }
]



Gene annotation service

This page describes the reference for MyGene.info gene annotation web service. It’s also recommended to try it live on our interactive API page.
Service endpoint

http://mygene.info/v3/gene

GET request

To obtain the gene annotation via our web service is as simple as calling this URL:

http://mygene.info/v3/gene/<geneid>

geneid above can be either Entrez gene id (“1017”) or Ensembl gene id (“ENSG00000123374”). By default, this will return the complete gene annotation object in JSON format. See here for an example and here for more details. If the input geneid is not valid, 404 (NOT FOUND) will be returned.

Hint

A retired Entrez gene id works too if it is replaced by a new one, e.g., 245794. But a “discontinued” gene id will not return any hit, e.g., 138.

Optionally, you can pass a “fields” parameter to return only the annotation you want (by filtering returned object fields):

http://mygene.info/v3/gene/1017?fields=name,symbol

“fields” accepts any attributes (a.k.a fields) available from the gene object. Multiple attributes should be seperated by commas. If an attribute is not available for a specific gene object, it will be ignored. Note that the attribute names are case-sensitive.

Just like gene query service, you can also pass a “callback” parameter to make a JSONP call.
Query parameters
fields

    Optional, can be a comma-separated fields to limit the fields returned from the gene object. If “fields=all”, all available fields will be returned. Note that it supports dot notation as well, e.g., you can pass “refseq.rna”. Default: “fields=all”.

callback

    Optional, you can pass a “callback” parameter to make a JSONP <http://ajaxian.com/archives/jsonp-json-with-padding> call.

filter

    Alias for “fields” parameter.

dotfield

    Optional, can be used to control the format of the returned fields when passed “fields” parameter contains dot notation, e.g. “fields=refseq.rna”. If “dofield” is true, the returned data object contains a single “refseq.rna” field, otherwise, a single “refseq” field with a sub-field of “rna”. Default: false.

email

    Optional, if you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.

Returned object

A GET request like this:

http://mygene.info/v3/gene/1017

Batch queries via POST

Although making simple GET requests above to our gene query service is sufficient in most of use cases, there are some cases you might find it’s more efficient to make queries in a batch (e.g., retrieving gene annotation for multiple genes). Fortunately, you can also make batch queries via POST requests when you need:

URL: http://mygene.info/v3/gene
HTTP method:  POST

Query parameters
ids

    Required. Accept multiple geneids (either Entrez or Ensembl gene ids) seperated by comma, e.g., ‘ids=1017,1018’ or ‘ids=695,ENSG00000123374’. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.

fields

    Optional, can be a comma-separated fields to limit the fields returned from the matching hits. If “fields=all”, all available fields will be returned. Note that it supports dot notation as well, e.g., you can pass “refseq.rna”. Default: “symbol,name,taxid,entrezgene”.

species

    Optional, can be used to limit the gene hits from given species. You can use “common names” for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. See more details here. Multiple species can be passed using comma as a separator. Passing “all” will query against all available species. Default: all.

dotfield

    Optional, can be used to control the format of the returned fields when passed “fields” parameter contains dot notation, e.g. “fields=refseq.rna”. If “dofield” is true, the returned data object contains a single “refseq.rna” field, otherwise, a single “refseq” field with a sub-field of “rna”. Default: false.

email

    Optional, if you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.

Example code

Unlike GET requests, you can easily test them from browser, make a POST request is often done via a piece of code, still trivial of course. Here is a sample python snippet:

import requests
headers = {'content-type': 'application/x-www-form-urlencoded'}
params = 'ids=1017,695&fields=name,symbol,refseq.rna'
res = requests.post('http://mygene.info/v3/gene', data=params, headers=headers)

Returned object

Returned result (the value of “res.text” variable above) from above example code should look like this:

[
  {
    '_id': '1017',
    '_score': 21.731894,
    'name': 'cyclin dependent kinase 2',
    'query': '1017',
    'refseq': {
      'rna': [
        'NM_001290230.1',
        'NM_001798.4',
        'NM_052827.3',
        'XM_011537732.1'
      ]
    },
    'symbol': 'CDK2'
  },
  {
    '_id': '695',
    '_score': 21.730501,
    'name': 'Bruton tyrosine kinase',
    'query': '695',
    'refseq': {
      'rna': [
        'NM_000061.2',
        'NM_001287344.1',
        'NM_001287345.1'
      ]
    },
    'symbol': 'BTK'
  }
]

